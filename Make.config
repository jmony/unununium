# common configuration for makefiles
#
# This file is included by every makefile in the Uuu build system.


#
# Interesting options concerning the operation of the build system
#


# set this to on to see the commands being run
VERBOSE=off
COLOR=on

SNAPDIR = $(UUUROOT)/snap
PYTHONDIR = $(UUUROOT)/python
SCITECH = $(SNAPDIR)
export SCITECH

#LISTINGS=1

AS=nasm
AS_ELF=nasm -f elf -DSANITY_CHECKS
AS_BIN=nasm -f bin
ASFLAGS=-i $(UUUROOT)/include/ -p $(UUUROOT)/include/ref_count.asm -p $(UUUROOT)/include/ret_counts.asm -p $(UUUROOT)/include/macros.inc
ifdef LISTINGS
  ASFLAGS += -l '$(basename $@).lst'
endif
export AS AS_ELF AS_BIN ASFLAGS

MKUDBFS=mkudbfs
MKUBBFSFLAGS=
export MKUDBFS MKUDBFSFLAGS

UDB_INSTBOOT = udb-instboot
UDB_INSTBOOT_FLAGS =
export UDB_INSBOOT UDB_INSBOOT_FLAGS

MKUUUBIMAGE = mkuuubimage
export MKUUUBIMAGE

XSLTPROC = xsltproc
export XSLTPROC

UUUDIET = $(UUUROOT)/lib/c/bin-i386/diet
export UUUDIET

CC = $(UUUDIET) gcc
export CC

CFLAGS += -I$(SNAPDIR)/include -I$(UUUROOT)/include -I$(UUUROOT)/include/python2.3 -I$(SNAPDIR)/include/snapgl
export CFLAGS

PYREXC = pyrexc

BARECC = gcc
export BARECC


# flags used to link stage2 with zlib. If you can't run the "boot" command,
# it's likely because you are linking with a zlib that is not compatible with
# the target machine. If this is the case, it's very easy to build zlib from
# source. After you have built it, change ZLIB_LDFLAGS to simply the full path
# to libz.a that zlib creates.

ifndef ZLIB_LDFLAGS
  ZLIB_LDFLAGS = -L/usr/lib -lz
  # ZLIB_LDFLAGS = /home/uuuuser/zlib-1.1.4/libz.a
  export ZLIB_LDFLAGS
endif

ARCH=x86
export ARCH


# what directories in which to search for source files.

SOURCE_DIRS = sys util lib


#
# Interesting options concerning the operation of Uuu at runtime
#


include $(UUUROOT)/messages.make

%.c: %.pyx
	$(compiling) '$<  >  $@'
	$(PYREXC) -o '$@' '$<'

%.bin: %.asm
	$(assembling) '$<  >  $@'
	$(AS_BIN) -o $@ $(ASFLAGS) -- $<

%.o: %.asm
	$(assembling) '$<  >  $@'
	$(AS_ELF) -o $@ $(ASFLAGS) -- $<

%.d: %.asm $(UUUROOT)/include/ret_counts.asm
	set -e
	$(AS) -M $(ASFLAGS) $< | sed 's/\($*\)\s*:/\1.bin \1.o $@ : /g' > $@ 2> /dev/null
	[ -s $@ ] || rm -f $@

%.o: %.c
	$(compiling) '$<  >  $@'
	$(CC) $(CFLAGS) -c -o '$@' '$<'

basic-clean:
	rm -f *.d *.lst


# vim: syn=make
